"""
Force l'enregistrement des agents Dremio dans OpenMetadata.
√Ä ex√©cuter dans le container ingestion.
"""

import logging
from typing import List, Dict, Any

print("‚û°Ô∏è Import des d√©pendances...")

print("üîÑ Import de metadata.ingestion.api.common.Entity")
from metadata.ingestion.api.common import Entity

print("üîÑ Import de metadata.ingestion.api.steps.Source")
from metadata.ingestion.api.steps import Source

print("üîÑ Import de metadata.ingestion.source.database.database_service.DatabaseServiceSource")
from metadata.ingestion.source.database.database_service import DatabaseServiceSource

print("\n‚û°Ô∏è Import des agents...")

print("üîÑ Import de dremio_connector.agents.metadata_agent")
from dremio_connector.agents.metadata_agent import MetadataAgent

print("üîÑ Import de dremio_connector.agents.profiler_agent")
from dremio_connector.agents.profiler_agent import ProfilerAgent

print("üîÑ Import de dremio_connector.agents.lineage_agent")
from dremio_connector.agents.lineage_agent import LineageAgent

print("üîÑ Import de dremio_connector.agents.dbt_agent")
from dremio_connector.agents.dbt_agent import DbtAgent

logger = logging.getLogger(__name__)

def force_register_agents() -> List[Dict[str, Any]]:
    """
    Force l'enregistrement des agents dans OpenMetadata.
    """
    print("\n‚û°Ô∏è Configuration des agents...")
    
    agents = [
        {
            "type": "metadata",
            "name": "MetadataAgent",
            "description": "Extrait les m√©tadonn√©es de Dremio",
            "class": "dremio_connector.agents.metadata_agent.MetadataAgent",
            "module": "dremio_connector.agents.metadata_agent"
        },
        {
            "type": "profiler",
            "name": "ProfilerAgent",
            "description": "Profile les donn√©es Dremio",
            "class": "dremio_connector.agents.profiler_agent.ProfilerAgent",
            "module": "dremio_connector.agents.profiler_agent"
        },
        {
            "type": "lineage",
            "name": "LineageAgent",
            "description": "Extrait le lineage des donn√©es Dremio",
            "class": "dremio_connector.agents.lineage_agent.LineageAgent",
            "module": "dremio_connector.agents.lineage_agent"
        },
        {
            "type": "dbt",
            "name": "DbtAgent",
            "description": "Int√®gre les mod√®les dbt avec Dremio",
            "class": "dremio_connector.agents.dbt_agent.DbtAgent",
            "module": "dremio_connector.agents.dbt_agent"
        }
    ]

    logger.info(f"üîÑ Enregistrement forc√© de {len(agents)} agents...")

    # V√©rifier que les agents sont importables
    print("\n‚û°Ô∏è Validation des agents...")
    
    for agent in agents:
        try:
            module_path = agent["class"].rsplit(".", 1)[0]
            class_name = agent["class"].rsplit(".", 1)[1]

            print(f"\nüîç Validation de {agent['name']}:")
            print(f"  - Module: {module_path}")
            print(f"  - Classe: {class_name}")

            # Import dynamique
            print(f"  - Import du module...")
            module = __import__(module_path, fromlist=[class_name])
            
            print(f"  - R√©cup√©ration de la classe...")
            agent_class = getattr(module, class_name)

            # V√©rifier l'h√©ritage
            print(f"  - V√©rification de l'h√©ritage...")
            if not issubclass(agent_class, Source):
                raise TypeError(f"L'agent {agent['name']} doit h√©riter de Source")

            logger.info(f"‚úÖ Agent {agent['name']} v√©rifi√©")

        except Exception as e:
            logger.error(f"‚ùå Erreur validation agent {agent['name']}: {e}")
            print(f"‚ùå D√©tails de l'erreur pour {agent['name']}:")
            import traceback
            traceback.print_exc()
            raise

    logger.info("‚úÖ Tous les agents sont valides")
    return agents

if __name__ == "__main__":
    # Configuration logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s"
    )

    print("\nüöÄ D√©marrage de l'enregistrement forc√© des agents...")

    try:
        agents = force_register_agents()
        logger.info(f"‚úÖ {len(agents)} agents enregistr√©s avec succ√®s:")
        for agent in agents:
            logger.info(f"  - {agent['name']} ({agent['type']})")
        print("\n‚úÖ Enregistrement termin√© avec succ√®s!")
    except Exception as e:
        logger.error(f"‚ùå Erreur: {e}")
        print("\n‚ùå Une erreur est survenue!")
        raise