#!/usr/bin/env python3
"""
Exemple complet: Ingestion dbt ‚Üí OpenMetadata avec lineage.

Ce script:
1. Parse manifest.json dbt
2. Extrait les mod√®les dbt
3. Ing√®re dans OpenMetadata
4. Cr√©e le lineage automatique
5. V√©rifie la coh√©rence du lineage
6. G√©n√®re un rapport

Usage:
    python dbt_ingestion_example.py
"""

import logging
import sys
from pathlib import Path

# Ajouter le chemin src au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from dremio_connector.dbt import DbtIntegration, LineageChecker

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """Fonction principale."""
    
    print("\n" + "="*80)
    print("üöÄ Ingestion dbt ‚Üí OpenMetadata")
    print("="*80 + "\n")
    
    # ========================================================================
    # Configuration
    # ========================================================================
    
    config = {
        'manifest_path': r'c:\projets\dremiodbt\dbt\target\manifest.json',
        'openmetadata': {
            'api_url': 'http://localhost:8585/api',
            'token': 'eyJraWQiOiJHYjM4OWEtOWY3Ni1nZGpzLWE5MmotMDI0MmJrOTQzNTYiLCJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlzQm90IjpmYWxzZSwiaXNzIjoib3Blbi1tZXRhZGF0YS5vcmciLCJpYXQiOjE3MzQxMjgzODQsImVtYWlsIjoiYWRtaW5Ab3Blbm1ldGFkYXRhLm9yZyJ9.eQxVFJw3fOIUpQrHchMdvD5K2nE6EBx4gg8Tv0h48VJhQQ6cH_Y6wRKC3qg8lQFPCIQTdSZMFQDrAGbQKvnNlb7Dg8mLRO6v8_UO-mOQTQMYgkP-Zt7_YYQfSYs3L35T5UlGRrBzVHKQXP10oj9XbQtXGKPy9BVzJ8EqB8xvTQKfOXOQRHKB8bT3NtlYpQhVLaFGkR3ZQq5GXZM9VQFXKqB3Y8RQMQvT9OQF3BqXY5OQ8F7VQY3KQB8XqTOQF5BqY3VQKQx8FQ7BQY3KQR8XQqOQF9BQY3VQK',  # Remplacer par votre token
            'service_name': 'dremio_dbt_service'
        }
    }
    
    # V√©rifier que le manifest existe
    manifest_path = Path(config['manifest_path'])
    if not manifest_path.exists():
        logger.error(f"‚ùå Manifest introuvable: {manifest_path}")
        logger.error("   Ex√©cutez 'dbt compile' ou 'dbt run' dans le projet dremiodbt")
        return 1
    
    # ========================================================================
    # √âtape 1: Initialiser int√©gration dbt
    # ========================================================================
    
    logger.info("üì¶ √âtape 1: Initialisation int√©gration dbt")
    
    try:
        dbt = DbtIntegration(
            manifest_path=config['manifest_path'],
            openmetadata_config=config['openmetadata']
        )
    except Exception as e:
        logger.error(f"‚ùå Erreur initialisation: {e}")
        return 1
    
    # ========================================================================
    # √âtape 2: Extraire mod√®les dbt
    # ========================================================================
    
    logger.info("\nüì¶ √âtape 2: Extraction mod√®les dbt")
    
    try:
        models = dbt.extract_models()
        
        if not models:
            logger.warning("‚ö†Ô∏è Aucun mod√®le trouv√© dans le manifest")
            return 1
        
        logger.info(f"\n‚úì {len(models)} mod√®les extraits:\n")
        
        # Afficher mod√®les par database/schema
        by_location = {}
        for model in models:
            location = f"{model['database']}.{model['schema']}"
            if location not in by_location:
                by_location[location] = []
            by_location[location].append(model['name'])
        
        for location, model_names in sorted(by_location.items()):
            print(f"  üìÅ {location}")
            for name in sorted(model_names):
                print(f"     ‚îî‚îÄ {name}")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur extraction: {e}")
        return 1
    
    # ========================================================================
    # √âtape 3: Afficher quelques mod√®les d√©taill√©s
    # ========================================================================
    
    logger.info("\nüìã √âtape 3: D√©tails de quelques mod√®les")
    
    for model in models[:3]:  # Afficher 3 premiers mod√®les
        print(f"\n  üìÑ {model['name']}")
        print(f"     Database: {model['database']}")
        print(f"     Schema: {model['schema']}")
        print(f"     Mat√©rialisation: {model['materialization']}")
        print(f"     Colonnes: {len(model['columns'])}")
        print(f"     D√©pendances: {len(model['depends_on'])}")
        print(f"     Tests: {len(model['tests'])}")
        if model['description']:
            desc = model['description'][:100] + '...' if len(model['description']) > 100 else model['description']
            print(f"     Description: {desc}")
    
    # ========================================================================
    # √âtape 4: Afficher lineage de quelques mod√®les
    # ========================================================================
    
    logger.info("\nüîó √âtape 4: Aper√ßu du lineage")
    
    for model in models[:3]:
        lineage = dbt.create_lineage(model)
        print(f"\n  üìä {model['name']}")
        print(f"     ‚¨ÜÔ∏è  Upstream: {len(lineage['upstream'])}")
        for up in lineage['upstream'][:2]:
            print(f"        ‚îî‚îÄ {up.split('.')[-1]}")
        if len(lineage['upstream']) > 2:
            print(f"        ... ({len(lineage['upstream']) - 2} autres)")
        
        print(f"     ‚¨áÔ∏è  Downstream: {len(lineage['downstream'])}")
        for down in lineage['downstream'][:2]:
            print(f"        ‚îî‚îÄ {down.split('.')[-1]}")
        if len(lineage['downstream']) > 2:
            print(f"        ... ({len(lineage['downstream']) - 2} autres)")
    
    # ========================================================================
    # √âtape 5: Ingestion dans OpenMetadata
    # ========================================================================
    
    logger.info("\nüîÑ √âtape 5: Ingestion dans OpenMetadata")
    
    # Demander confirmation
    response = input("\n‚ö†Ô∏è  Voulez-vous lancer l'ingestion dans OpenMetadata? (o/N): ")
    if response.lower() != 'o':
        logger.info("Ingestion annul√©e par l'utilisateur")
        logger.info("\n‚úÖ Script termin√© (mode lecture seule)")
        return 0
    
    try:
        stats = dbt.ingest_to_openmetadata(models)
        
        # Afficher r√©sultats
        print("\n" + "="*80)
        print("üìä R√©sultats de l'ingestion")
        print("="*80)
        print(f"  Mod√®les trait√©s:     {stats['models_processed']}/{len(models)}")
        print(f"  Tables cr√©√©es/m√†j:   {stats['tables_created']}")
        print(f"  Lineages cr√©√©s:      {stats['lineage_created']}")
        print(f"  Erreurs:             {len(stats['errors'])}")
        
        if stats['errors']:
            print("\n‚ö†Ô∏è  Erreurs d√©tect√©es:")
            for error in stats['errors'][:10]:  # Max 10
                print(f"  - {error}")
        
        print("="*80)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur ingestion: {e}")
        return 1
    
    # ========================================================================
    # √âtape 6: V√©rifier lineage (si ingestion effectu√©e)
    # ========================================================================
    
    if stats['tables_created'] > 0:
        logger.info("\nüîç √âtape 6: V√©rification lineage")
        
        try:
            checker = LineageChecker(config['openmetadata'])
            
            # V√©rifier une table sp√©cifique (premi√®re table ing√©r√©e)
            if models:
                first_model = models[0]
                table_fqn = f"{config['openmetadata']['service_name']}.{first_model['database']}.{first_model['schema']}.{first_model['alias']}"
                
                logger.info(f"\nüìä Exemple de lineage: {first_model['name']}")
                print(checker.visualize_lineage(table_fqn))
            
            # V√©rifier tout le lineage
            logger.info("\nüìà V√©rification globale du lineage...")
            report = checker.check_all_lineage()
            
            print("\n" + "="*80)
            print("üìä Rapport Global de Lineage")
            print("="*80)
            print(f"  Total tables:           {report['total_tables']}")
            print(f"  Avec lineage:           {report['tables_with_lineage']}")
            print(f"  Sans lineage:           {report['tables_without_lineage']}")
            print(f"  Taux compl√©tion:        {report['completion_rate']:.1%}")
            print(f"  Avec probl√®mes:         {report['tables_with_issues']}")
            print("="*80)
            
            # G√©n√©rer rapport markdown
            report_file = 'lineage_report.md'
            markdown = checker.generate_lineage_report(output_file=report_file)
            logger.info(f"\n‚úì Rapport d√©taill√© g√©n√©r√©: {report_file}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur v√©rification lineage: {e}")
    
    # ========================================================================
    # Fin
    # ========================================================================
    
    print("\n" + "="*80)
    print("‚úÖ Script termin√© avec succ√®s!")
    print("="*80 + "\n")
    
    return 0


if __name__ == '__main__':
    sys.exit(main())
