#!/usr/bin/env python3
"""
‚úÖ VALIDATION POST-RESTAURATION DREMIO
====================================
Script pour valider que la restauration s'est bien pass√©e.
V√©rifie les sources, espaces, et VDS apr√®s une restauration.
"""

import logging
import sys
import requests
import json
import time
from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DremioValidator:
    """Validateur pour v√©rifier l'√©tat de Dremio apr√®s restauration"""
    
    def __init__(self, host="localhost", port=9047, username="admin", password="admin123"):
        self.base_url = f"http://{host}:{port}"
        self.username = username
        self.password = password
        
        self.session = requests.Session()
        self.token = None
        
    def login(self):
        """Connexion √† Dremio"""
        logger.info("üîê Connexion √† Dremio pour validation...")
        
        login_url = f"{self.base_url}/apiv2/login"
        login_data = {
            "userName": self.username,
            "password": self.password
        }
        
        try:
            response = self.session.post(login_url, json=login_data, timeout=30)
            
            if response.status_code == 200:
                self.token = response.json().get('token')
                self.session.headers.update({'Authorization': f'_dremio{self.token}'})
                logger.info("‚úÖ Connexion validation r√©ussie")
                return True
            else:
                logger.error(f"‚ùå √âchec connexion validation: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur connexion validation: {e}")
            return False
    
    def validate_sources(self, expected_sources=None):
        """Valider les sources de donn√©es"""
        logger.info("üìã Validation des sources...")
        
        try:
            url = f"{self.base_url}/api/v3/source"
            response = self.session.get(url, timeout=30)
            
            if response.status_code == 200:
                current_sources = response.json().get('data', [])
                logger.info(f"‚úÖ {len(current_sources)} sources trouv√©es")
                
                validation_results = {
                    'total_sources': len(current_sources),
                    'sources': [],
                    'missing_sources': [],
                    'connection_tests': {}
                }
                
                for source in current_sources:
                    source_info = {
                        'name': source['name'],
                        'type': source['type'],
                        'state': source.get('state', 'Unknown')
                    }
                    validation_results['sources'].append(source_info)
                    logger.info(f"   - {source['name']} ({source['type']}) - √âtat: {source_info['state']}")
                    
                    # Test de connexion
                    connection_ok = self.test_source_connection(source['id'])
                    validation_results['connection_tests'][source['name']] = connection_ok
                
                # V√©rifier les sources attendues si sp√©cifi√©es
                if expected_sources:
                    current_names = {s['name'] for s in current_sources}
                    expected_names = {s['name'] for s in expected_sources}
                    missing = expected_names - current_names
                    validation_results['missing_sources'] = list(missing)
                    
                    if missing:
                        logger.warning(f"‚ö†Ô∏è Sources manquantes: {', '.join(missing)}")
                    else:
                        logger.info("‚úÖ Toutes les sources attendues sont pr√©sentes")
                
                return validation_results
            else:
                logger.error(f"‚ùå Erreur r√©cup√©ration sources: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur validate_sources: {e}")
            return None
    
    def test_source_connection(self, source_id):
        """Tester la connexion d'une source"""
        try:
            url = f"{self.base_url}/api/v3/source/{source_id}/test"
            response = self.session.post(url, timeout=60)  # Plus long timeout pour les tests de connexion
            
            return response.status_code == 200
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur test connexion source {source_id}: {e}")
            return False
    
    def validate_spaces(self, expected_spaces=None):
        """Valider les espaces"""
        logger.info("üìÇ Validation des espaces...")
        
        try:
            url = f"{self.base_url}/api/v3/space"
            response = self.session.get(url, timeout=30)
            
            if response.status_code == 200:
                current_spaces = response.json().get('data', [])
                logger.info(f"‚úÖ {len(current_spaces)} espaces trouv√©s")
                
                validation_results = {
                    'total_spaces': len(current_spaces),
                    'spaces': [],
                    'missing_spaces': []
                }
                
                for space in current_spaces:
                    space_info = {
                        'name': space['name'],
                        'id': space['id']
                    }
                    validation_results['spaces'].append(space_info)
                    logger.info(f"   - {space['name']}")
                
                # V√©rifier les espaces attendus
                if expected_spaces:
                    current_names = {s['name'] for s in current_spaces}
                    expected_names = {s['name'] for s in expected_spaces}
                    missing = expected_names - current_names
                    validation_results['missing_spaces'] = list(missing)
                    
                    if missing:
                        logger.warning(f"‚ö†Ô∏è Espaces manquants: {', '.join(missing)}")
                    else:
                        logger.info("‚úÖ Tous les espaces attendus sont pr√©sents")
                
                return validation_results
            else:
                logger.error(f"‚ùå Erreur r√©cup√©ration espaces: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur validate_spaces: {e}")
            return None
    
    def validate_vds_in_space(self, space_name):
        """Valider les VDS dans un espace sp√©cifique"""
        logger.info(f"üéØ Validation VDS dans l'espace '{space_name}'...")
        
        try:
            url = f"{self.base_url}/api/v3/catalog/{space_name}"
            response = self.session.get(url, timeout=30)
            
            if response.status_code == 200:
                catalog_data = response.json()
                children = catalog_data.get('children', [])
                
                vds_count = 0
                vds_list = []
                
                for child in children:
                    if child.get('type') == 'VIRTUAL_DATASET':
                        vds_count += 1
                        vds_info = {
                            'name': child['name'],
                            'path': child['path'],
                            'type': child['type']
                        }
                        vds_list.append(vds_info)
                        logger.info(f"   - VDS: {child['name']}")
                
                logger.info(f"‚úÖ {vds_count} VDS trouv√©s dans '{space_name}'")
                return {
                    'space': space_name,
                    'vds_count': vds_count,
                    'vds_list': vds_list
                }
            else:
                logger.warning(f"‚ö†Ô∏è Impossible d'acc√©der √† l'espace {space_name}: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erreur validate_vds_in_space {space_name}: {e}")
            return None
    
    def test_vds_query(self, vds_path, limit=5):
        """Tester l'ex√©cution d'un VDS avec une requ√™te LIMIT"""
        logger.info(f"üîç Test requ√™te VDS: {'/'.join(vds_path)}")
        
        try:
            # Construire la requ√™te SQL
            full_path = '.'.join([f'"{p}"' for p in vds_path])
            sql = f"SELECT * FROM {full_path} LIMIT {limit}"
            
            # Soumettre le job
            job_url = f"{self.base_url}/api/v3/sql"
            job_data = {
                "sql": sql,
                "context": []
            }
            
            response = self.session.post(job_url, json=job_data, timeout=30)
            
            if response.status_code == 200:
                job_info = response.json()
                job_id = job_info.get('id')
                
                if job_id:
                    # Attendre que le job se termine (simple polling)
                    for _ in range(10):  # Max 10 secondes d'attente
                        time.sleep(1)
                        status_url = f"{self.base_url}/api/v3/job/{job_id}"
                        status_response = self.session.get(status_url, timeout=10)
                        
                        if status_response.status_code == 200:
                            job_status = status_response.json()
                            state = job_status.get('jobState')
                            
                            if state == 'COMPLETED':
                                logger.info(f"‚úÖ VDS query test r√©ussi: {'/'.join(vds_path)}")
                                return True
                            elif state in ['FAILED', 'CANCELED']:
                                logger.warning(f"‚ö†Ô∏è VDS query test √©chou√©: {'/'.join(vds_path)} - √âtat: {state}")
                                return False
                    
                    logger.warning(f"‚ö†Ô∏è VDS query test timeout: {'/'.join(vds_path)}")
                    return False
                else:
                    logger.warning(f"‚ö†Ô∏è Pas de job ID pour VDS: {'/'.join(vds_path)}")
                    return False
            else:
                logger.warning(f"‚ö†Ô∏è Erreur soumission query VDS {'/'.join(vds_path)}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur test_vds_query {'/'.join(vds_path)}: {e}")
            return False
    
    def full_validation(self, backup_file=None):
        """Validation compl√®te de l'environnement"""
        logger.info("üöÄ D√©but de la validation compl√®te...")
        
        if not self.login():
            logger.error("‚ùå Impossible de se connecter pour la validation")
            return False
        
        validation_report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'sources': None,
            'spaces': None,
            'vds_tests': [],
            'overall_status': 'UNKNOWN'
        }
        
        expected_data = None
        if backup_file and Path(backup_file).exists():
            logger.info(f"üìã Utilisation du fichier de r√©f√©rence: {backup_file}")
            try:
                with open(backup_file, 'r', encoding='utf-8') as f:
                    expected_data = json.load(f)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lecture fichier backup: {e}")
        
        # Validation des sources
        expected_sources = expected_data.get('sources') if expected_data else None
        sources_result = self.validate_sources(expected_sources)
        validation_report['sources'] = sources_result
        
        # Validation des espaces
        expected_spaces = expected_data.get('spaces') if expected_data else None
        spaces_result = self.validate_spaces(expected_spaces)
        validation_report['spaces'] = spaces_result
        
        # Test des VDS si des espaces existent
        if spaces_result and spaces_result['spaces']:
            for space in spaces_result['spaces']:
                vds_result = self.validate_vds_in_space(space['name'])
                if vds_result:
                    validation_report['vds_tests'].append(vds_result)
        
        # D√©terminer le statut global
        issues = []
        
        if sources_result:
            failed_connections = sum(1 for ok in sources_result['connection_tests'].values() if not ok)
            if failed_connections > 0:
                issues.append(f"{failed_connections} source(s) avec probl√®me de connexion")
            
            if sources_result['missing_sources']:
                issues.append(f"{len(sources_result['missing_sources'])} source(s) manquante(s)")
        
        if spaces_result and spaces_result['missing_spaces']:
            issues.append(f"{len(spaces_result['missing_spaces'])} espace(s) manquant(s)")
        
        if issues:
            validation_report['overall_status'] = 'WARNING'
            validation_report['issues'] = issues
            logger.warning(f"‚ö†Ô∏è Validation termin√©e avec des avertissements: {'; '.join(issues)}")
        else:
            validation_report['overall_status'] = 'SUCCESS'
            logger.info("‚úÖ Validation compl√®te r√©ussie - Aucun probl√®me d√©tect√©")
        
        # Sauvegarder le rapport
        report_file = Path("validation_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(validation_report, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìä Rapport de validation sauvegard√©: {report_file}")
        
        return validation_report['overall_status'] == 'SUCCESS'

def main():
    """Interface en ligne de commande pour la validation"""
    
    if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
        print("‚úÖ DREMIO VALIDATION POST-RESTAURATION")
        print("Usage:")
        print("  python validate_restoration.py")
        print("  python validate_restoration.py [backup_file.json]")
        print()
        print("Le script valide :")
        print("  - Connexion √† Dremio")
        print("  - Sources de donn√©es et leurs connexions") 
        print("  - Espaces et leur contenu")
        print("  - VDS et leur fonctionnement")
        sys.exit(0)
    
    backup_file = sys.argv[1] if len(sys.argv) > 1 else None
    
    validator = DremioValidator()
    
    print("‚úÖ VALIDATION DREMIO POST-RESTAURATION")
    print("=" * 50)
    
    success = validator.full_validation(backup_file)
    
    if success:
        print("\nüéâ VALIDATION R√âUSSIE - Environnement Dremio op√©rationnel")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è VALIDATION AVEC AVERTISSEMENTS - V√©rifiez le rapport")
        sys.exit(1)

if __name__ == "__main__":
    main()